{"version":3,"sources":["../../source/command/migrate.js"],"names":["Command","FileSystem","JSON5","Path","URL","Package","parse","readFileSync","Process","process","MigrationClassPath","migrate","migrationClassPath","MigrationExportName","migrationExportName","importMigration","path","name","migration","pathToFileURL","version","option","command","description","action","parameter","Migration","opts","getMigration","console","log","relative","isInstalled","exit","error","createMigration","installMigration","uninstallMigration","argv"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport '@virtualpatterns/mablung-source-map-support/install'\nimport Command from 'commander'\nimport { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport JSON5 from 'json5'\nimport Path from 'path'\nimport URL from 'url'\n\nconst Package = JSON5.parse(FileSystem.readFileSync('package.json'), { 'encoding': 'utf-8' })\nconst Process = process\n\nconst MigrationClassPath = Package.migrate?.migrationClassPath || 'distributable/library/migration.js'\nconst MigrationExportName = Package.migrate?.migrationExportName || 'Migration'\n\nasync function importMigration(path, name) {\n\n  let migration = null\n  migration = await import(URL.pathToFileURL(path))\n  migration = migration[name] || migration\n\n  return migration\n  \n}\n\nCommand\n  .version(Package.version)\n  .option('--migration-class-path <path>', 'Path of the migration class to import', MigrationClassPath)\n  .option('--migration-export-name <name>', 'Exported name of the migration class to import', MigrationExportName)\n\nCommand\n  .command('list [parameter...]')\n  .description('List all known migrations')\n  .action(async (parameter) => {\n\n    try {\n\n      let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n      for (let migration of (await Migration.getMigration(...parameter))) {\n        console.log(`'${Path.relative('', migration.path)}' is ${(await migration.isInstalled()) ? '' : 'NOT '}installed`)\n      }\n\n      Process.exit(0)\n      \n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand\n  .command('create <name>')\n  .description('Create a new migration with the given name in the default folder')\n  .action(async (name) => {\n\n    let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n    try {\n\n      console.log(`Created ${Path.relative('', await Migration.createMigration(name))}`)\n      Process.exit(0)\n\n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand\n  .command('install [parameter...]')\n  .description('Install known, uninstalled migrations')\n  .action(async (parameter) => {\n\n    let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n    try {\n\n      await Migration.installMigration(...parameter)\n      Process.exit(0)\n\n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand\n  .command('uninstall [parameter...]')\n  .description('Uninstall all known, installed migrations')\n  .action(async (parameter) => {\n\n    let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n    try {\n\n      await Migration.uninstallMigration(...parameter)\n      Process.exit(0)\n\n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand.parse(Process.argv)\n"],"file":"migrate.js"}