{"version":3,"sources":["../../source/command/migrate.js"],"names":[],"mappings":"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","file":"migrate.js","sourcesContent":["#!/usr/bin/env node\n\nimport '@virtualpatterns/mablung-source-map-support/install'\nimport Command from 'commander'\nimport { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport JSON5 from 'json5'\nimport Path from 'path'\nimport URL from 'url'\n\nconst Package = JSON5.parse(FileSystem.readFileSync('package.json'), { 'encoding': 'utf-8' })\nconst Process = process\n\nconst MigrationClassPath = Package.migrate?.migrationClassPath || 'distributable/library/migration.js'\nconst MigrationExportName = Package.migrate?.migrationExportName || 'Migration'\n\nasync function importMigration(path, name) {\n\n  let migration = null\n  migration = await import(URL.pathToFileURL(path))\n  migration = migration[name] || migration\n\n  return migration\n  \n}\n\nCommand\n  .version(Package.version)\n  .option('--migration-class-path <path>', 'Path of the migration class to import', MigrationClassPath)\n  .option('--migration-export-name <name>', 'Exported name of the migration class to import', MigrationExportName)\n\nCommand\n  .command('list [parameter...]')\n  .description('List all known migrations')\n  .action(async (parameter) => {\n\n    try {\n\n      let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n      for (let migration of (await Migration.getMigration(...parameter))) {\n        console.log(`'${Path.relative('', migration.path)}' is ${(await migration.isInstalled()) ? '' : 'NOT '}installed`)\n      }\n\n      Process.exit(0)\n      \n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand\n  .command('create <name>')\n  .description('Create a new migration with the given name in the default folder')\n  .action(async (name) => {\n\n    let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n    try {\n\n      console.log(`Created ${Path.relative('', await Migration.createMigration(name))}`)\n      Process.exit(0)\n\n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand\n  .command('install [parameter...]')\n  .description('Install known, uninstalled migrations')\n  .action(async (parameter) => {\n\n    let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n    try {\n\n      await Migration.installMigration(...parameter)\n      Process.exit(0)\n\n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand\n  .command('uninstall [parameter...]')\n  .description('Uninstall all known, installed migrations')\n  .action(async (parameter) => {\n\n    let Migration = await importMigration(Command.opts().migrationClassPath, Command.opts().migrationExportName)\n\n    try {\n\n      await Migration.uninstallMigration(...parameter)\n      Process.exit(0)\n\n    } catch (error) {\n      console.error(error)\n      Process.exit(1)\n    }\n\n  })\n\nCommand.parse(Process.argv)\n"]}