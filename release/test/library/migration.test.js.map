{"version":3,"sources":["../../../source/test/library/migration.test.js"],"names":[],"mappings":"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","file":"migration.test.js","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Test from 'ava'\n\nimport { Migration } from '../library//migration.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\n\nTest.serial('Migration.createMigration(name)', async (test) => {\n\n  let name = 'migration-create-migration'\n\n  await Migration.createMigration(name)\n\n  let folderPath = Path.normalize(`${FolderPath}/../../../source/test/library/migration`)\n  let pattern = `*-${name}.js`\n\n  let item = await FileSystem.readdir(folderPath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  let path = item\n    .filter((item) => item.isFile())\n    .filter((file) => Match(file.name, pattern))\n    .map((file) => `${folderPath}/${file.name}`)\n\n  test.is(path.length, 1)\n\n  await FileSystem.remove(path[0])\n\n})\n\nTest.serial('Migration.getMigration()', async (test) => {\n\n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 3)\n\n  test.is(migration[0].name, '00000000000000-null')\n  test.is(await migration[0].isInstalled(), false)\n  test.is(migration[1].name, '00000000000001-null')\n  test.is(await migration[1].isInstalled(), false)\n  test.is(migration[2].name, '00000000000002-null')\n  test.is(await migration[2].isInstalled(), false)\n\n})\n\nTest.serial('Migration.installMigration()', async (test) => {\n\n  await Migration.installMigration()\n\n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 3)\n\n  test.is(await migration[0].isInstalled(), true)\n  test.is(await migration[1].isInstalled(), true)\n  test.is(await migration[2].isInstalled(), true)\n\n})\n\nTest.serial('Migration.uninstallMigration()', async (test) => {\n\n  await Migration.uninstallMigration()\n\n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 3)\n  \n  test.is(await migration[0].isInstalled(), false)\n  test.is(await migration[1].isInstalled(), false)\n  test.is(await migration[2].isInstalled(), false)\n\n})\n"]}