{"version":3,"sources":["../../../source/test/command/migrate.test.js"],"names":["FileSystem","Match","Path","Test","MigrateProcess","Migration","FilePath","_URL","fileURLToPath","import","meta","url","FolderPath","dirname","serial","test","process","is","whenExit","name","folderPath","pattern","item","readdir","path","filter","isFile","file","map","length","remove","migration","getMigration","isInstalled"],"mappings":"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","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Test from 'ava'\n\nimport { MigrateProcess } from './migrate-process.js'\nimport { Migration } from './migration.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\n\nTest.serial('migrate list', async (test) => {\n  let process = new MigrateProcess({ 'list': true })\n  test.is(await process.whenExit(), 0)\n})\n\nTest.serial('migrate create', async (test) => {\n\n  let name = 'migrate-create'\n\n  let process = new MigrateProcess({ 'create': name })\n  test.is(await process.whenExit(), 0)\n\n  let folderPath = `${FolderPath}/../../../source/test/command/migration`\n  let pattern = `*-${name}.js`\n\n  let item = await FileSystem.readdir(folderPath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  let path = item\n    .filter((item) => item.isFile())\n    .filter((file) => Match(file.name, pattern))\n    .map((file) => `${folderPath}/${file.name}`)\n\n  test.is(path.length, 1)\n\n  await FileSystem.remove(path[0])\n\n})\n\nTest.serial('migrate install', async (test) => {\n\n  let process = new MigrateProcess({ 'install': true })\n  test.is(await process.whenExit(), 0)\n  \n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 1)\n  test.is(await migration[0].isInstalled(), true)\n\n})\n\nTest.serial('migrate uninstall', async (test) => {\n\n  let process = new MigrateProcess({ 'uninstall': true })\n  test.is(await process.whenExit(), 0)\n  \n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 1)\n  test.is(await migration[0].isInstalled(), false)\n\n})\n"],"file":"migrate.test.js"}