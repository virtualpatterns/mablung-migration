{"version":3,"sources":["../../../source/test/library/migration.test.js"],"names":["FileSystem","Match","Path","Test","Migration","FilePath","_URL","fileURLToPath","import","meta","url","FolderPath","dirname","serial","test","name","createMigration","folderPath","normalize","pattern","item","readdir","path","filter","isFile","file","map","is","length","remove","migration","getMigration","isInstalled","installMigration","uninstallMigration"],"mappings":"uBAAA,SAASA,UAAT,QAA2B,sCAA3B;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,KAAjB;;AAEA,SAASC,SAAT,QAA0B,0BAA1B;;AAEA,MAAMC,QAAQ,GAPdC,IAAI,CAACC,aAAL,CAAmBC,MAAM,CAACC,IAAP,CAAYC,GAA/B,CAOA;AACA,MAAMC,UAAU,GAAGT,IAAI,CAACU,OAAL,CAAaP,QAAb,CAAnB;;AAEAF,IAAI,CAACU,MAAL,CAAY,iCAAZ,EAA+C,MAAOC,IAAP,IAAgB;;AAE7D,MAAIC,IAAI,GAAG,4BAAX;;AAEA,QAAMX,SAAS,CAACY,eAAV,CAA0BD,IAA1B,CAAN;;AAEA,MAAIE,UAAU,GAAGf,IAAI,CAACgB,SAAL,CAAgB,GAAEP,UAAW,yCAA7B,CAAjB;AACA,MAAIQ,OAAO,GAAI,KAAIJ,IAAK,KAAxB;;AAEA,MAAIK,IAAI,GAAG,MAAMpB,UAAU,CAACqB,OAAX,CAAmBJ,UAAnB,EAA+B,EAAE,YAAY,OAAd,EAAuB,iBAAiB,IAAxC,EAA/B,CAAjB;AACA,MAAIK,IAAI,GAAGF,IAAI;AACZG,EAAAA,MADQ,CACAH,IAAD,IAAUA,IAAI,CAACI,MAAL,EADT;AAERD,EAAAA,MAFQ,CAEAE,IAAD,IAAUxB,KAAK,CAACwB,IAAI,CAACV,IAAN,EAAYI,OAAZ,CAFd;AAGRO,EAAAA,GAHQ,CAGHD,IAAD,IAAW,GAAER,UAAW,IAAGQ,IAAI,CAACV,IAAK,EAHjC,CAAX;;AAKAD,EAAAA,IAAI,CAACa,EAAL,CAAQL,IAAI,CAACM,MAAb,EAAqB,CAArB;;AAEA,QAAM5B,UAAU,CAAC6B,MAAX,CAAkBP,IAAI,CAAC,CAAD,CAAtB,CAAN;;AAED,CAnBD;;AAqBAnB,IAAI,CAACU,MAAL,CAAY,0BAAZ,EAAwC,MAAOC,IAAP,IAAgB;;AAEtD,MAAIgB,SAAS,GAAG,MAAM1B,SAAS,CAAC2B,YAAV,EAAtB;;AAEAjB,EAAAA,IAAI,CAACa,EAAL,CAAQG,SAAS,CAACF,MAAlB,EAA0B,CAA1B;;AAEAd,EAAAA,IAAI,CAACa,EAAL,CAAQG,SAAS,CAAC,CAAD,CAAT,CAAaf,IAArB,EAA2B,qBAA3B;AACAD,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,KAA1C;AACAlB,EAAAA,IAAI,CAACa,EAAL,CAAQG,SAAS,CAAC,CAAD,CAAT,CAAaf,IAArB,EAA2B,qBAA3B;AACAD,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,KAA1C;AACAlB,EAAAA,IAAI,CAACa,EAAL,CAAQG,SAAS,CAAC,CAAD,CAAT,CAAaf,IAArB,EAA2B,qBAA3B;AACAD,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,KAA1C;;AAED,CAbD;;AAeA7B,IAAI,CAACU,MAAL,CAAY,8BAAZ,EAA4C,MAAOC,IAAP,IAAgB;;AAE1D,QAAMV,SAAS,CAAC6B,gBAAV,EAAN;;AAEA,MAAIH,SAAS,GAAG,MAAM1B,SAAS,CAAC2B,YAAV,EAAtB;;AAEAjB,EAAAA,IAAI,CAACa,EAAL,CAAQG,SAAS,CAACF,MAAlB,EAA0B,CAA1B;;AAEAd,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,IAA1C;AACAlB,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,IAA1C;AACAlB,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,IAA1C;;AAED,CAZD;;AAcA7B,IAAI,CAACU,MAAL,CAAY,gCAAZ,EAA8C,MAAOC,IAAP,IAAgB;;AAE5D,QAAMV,SAAS,CAAC8B,kBAAV,EAAN;;AAEA,MAAIJ,SAAS,GAAG,MAAM1B,SAAS,CAAC2B,YAAV,EAAtB;;AAEAjB,EAAAA,IAAI,CAACa,EAAL,CAAQG,SAAS,CAACF,MAAlB,EAA0B,CAA1B;;AAEAd,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,KAA1C;AACAlB,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,KAA1C;AACAlB,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAMG,SAAS,CAAC,CAAD,CAAT,CAAaE,WAAb,EAAd,EAA0C,KAA1C;;AAED,CAZD","sourcesContent":["import { FileSystem } from '@virtualpatterns/mablung-file-system'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Test from 'ava'\n\nimport { Migration } from '../library//migration.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\n\nTest.serial('Migration.createMigration(name)', async (test) => {\n\n  let name = 'migration-create-migration'\n\n  await Migration.createMigration(name)\n\n  let folderPath = Path.normalize(`${FolderPath}/../../../source/test/library/migration`)\n  let pattern = `*-${name}.js`\n\n  let item = await FileSystem.readdir(folderPath, { 'encoding': 'utf-8', 'withFileTypes': true })\n  let path = item\n    .filter((item) => item.isFile())\n    .filter((file) => Match(file.name, pattern))\n    .map((file) => `${folderPath}/${file.name}`)\n\n  test.is(path.length, 1)\n\n  await FileSystem.remove(path[0])\n\n})\n\nTest.serial('Migration.getMigration()', async (test) => {\n\n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 3)\n\n  test.is(migration[0].name, '00000000000000-null')\n  test.is(await migration[0].isInstalled(), false)\n  test.is(migration[1].name, '00000000000001-null')\n  test.is(await migration[1].isInstalled(), false)\n  test.is(migration[2].name, '00000000000002-null')\n  test.is(await migration[2].isInstalled(), false)\n\n})\n\nTest.serial('Migration.installMigration()', async (test) => {\n\n  await Migration.installMigration()\n\n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 3)\n\n  test.is(await migration[0].isInstalled(), true)\n  test.is(await migration[1].isInstalled(), true)\n  test.is(await migration[2].isInstalled(), true)\n\n})\n\nTest.serial('Migration.uninstallMigration()', async (test) => {\n\n  await Migration.uninstallMigration()\n\n  let migration = await Migration.getMigration()\n\n  test.is(migration.length, 3)\n  \n  test.is(await migration[0].isInstalled(), false)\n  test.is(await migration[1].isInstalled(), false)\n  test.is(await migration[2].isInstalled(), false)\n\n})\n"],"file":"migration.test.js"}